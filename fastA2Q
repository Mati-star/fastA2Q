#!/bin/bash

#	Program 	- 	fastA2Q
#	Written by	-	Abhijeet Singh (abhijeetsingh.aau@gmail.com)
#	Time 		-	Wed May 13 13:54:37 CEST 2020 

# 	set pipefail
	set -uo pipefail

# 	making colour variable	
	RESTORE='\033[0m'
	YELLOW='\033[01;33m'
	LRED='\033[01;31m'

#	Recording the time whent the script was started
	start=$(date +%s) #start time of script

#	echo script name
echo -e "$LRED\
 _________________________________________
|   __           _      _    ____   ___   |
|  / _| __ _ ___| |_   / \  |___ \ / _ \  |
| | |_ / _| / __| __| / _ \   __) | | | | |
| |  _| (_| \__ \ |_ / ___ \ / __/| |_| | |
| |_|  \__|_|___/\__/_/   \_\_____|\__\_\ |
|_________________________________________|
${RESTORE}\n#\t${YELLOW}Â©Abhijeet Singh${RESTORE}
#\t${YELLOW}-abhijeetsingh.aau@gmail.com${RESTORE}"


#	Variable for the date
    DATE=$(date +"%Y%m%d_%H:%M:%S")

#	Setting up variables
    input_file=""
    output_file=""

#	Defaults variables
    output_file_def="fastA2Q_${DATE}.fastq"
    version_def="1.0"

#	Username
    user="${SUDO_USER:-${USER}}"

#	Defining flags

#   function
usage() {
echo "Usage   : $0 [-i <input file>] [-o <output file>]
Example : fastA2Q -i /<input file>/ -o /<output file>/" 1>&2; return 1;
}

#   flags
while getopts "i:o:hvc" flags;
    do
        case "${flags}" in
            i)
                input_file=${OPTARG}
                ;;
            o)
                output_file=${OPTARG}
                ;;
            h)
                echo -e "\n#\tExample : fastA2Q -i /<input file>/ -o /<output file>/\n"
				echo -e "\t-i\tInput file"
				echo -e "\t-o\tOutput file"
				echo -e "\t-h\tprint Help"
				echo -e "\t-v\tprint fastA2Q version"
				echo -e "\t-c\tCitation\n###"
                exit
                ;;
            v)
                echo -e "\n#\tfastA2Q version: ${version_def}\n###"
                exit
                ;;
			c)
				echo -e "\n#\tIf you use ${YELLOW}fastA2Q${RESTORE}, please cite as:\n"
				echo -e "\tCitation:\n"
				echo -e "\tAbhijeet Singh"
				echo -e "\tfastA2Q: a simple and convenient program to convert fasta\n\tsequences to fastq sequences"
				echo -e "\thttps://github.com/abhijeetsingh1704/fastA2Q"
				echo -e "\tdoi: 10.13140/RG.2.2.13695.15529\n###"
				exit
				;;
            *)
                usage
                exit
                ;;
            :)
                usage
                exit
                ;;
            \?)
                usage
                exit
                ;;
        esac
    done
shift $((OPTIND-1))

#	check
if ((OPTIND == 1));then
    echo -e "\n#\tInput file not provided, Aborting!"
    usage
    exit 1
else
    echo -e "\n#\tProcessing: ${input_file}"
fi

#	Getting input

    #   Check if input file provided
        if [ -z "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file not provided, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        fi

    #   Check if input file is accessible
        if [ ! -f "${input_file}" ] ; then
            echo -e "\n#\t${LRED}Input file ${input_file} could not be found, Aborting!!!\n###\n${RESTORE} ${YELLOW}"
            usage
            echo -e "\n###${RESTORE}"
            exit 1
        else
            #   Making variable paths
                input_path=$(dirname "$(realpath "${input_file}")")
            #   Checking file contents
                echo -e "\n#\tContents of input file ${YELLOW}$(basename "${input_file}")${RESTORE}"
            #   Counting number of bases
                npos=$(grep -v '>' "${input_file}" | wc | awk '{print $3-$1}')
            #   Counting number of sequences
                nseq=$(grep -c '>' "${input_file}")
            #   Displaying file contents
                echo -e "\t\t${YELLOW}${npos}${RESTORE} bases in ${YELLOW}${nseq}${RESTORE} sequences"
        fi

#	Checking output file provided or using default

    if [ "$output_file" == "" ]; then
        output_file="${input_path}/${output_file_def}"
        echo -e "\n#\tUsing default output file:"
        echo -e "\t\t${YELLOW}${output_file}${RESTORE}"
    else
		echo -e "\n#\tOutput file:"
        echo -e "\t\t${YELLOW}${output_file}${RESTORE}"
    fi

#   making a new file

    perl -pe '/^>/ ? print "\n" : chomp' "${input_file}" | sed '/^$/d' | sed '/>/d' > "${input_file}.tmp"

### making fastq header components (constant variables)


    #   unique instrument name
        P1=$(tr -dc '[:upper:]' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 3 | head -n 1)
    #   run id
        P2=$(tr -dc '0-9' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 3 | head -n 1)
    #   flowcell id
        P3=$(tr -dc 'A-Z0-9' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 7 | head -n 1)
    #   flowcell lane
        P4=$(tr -dc '1-8' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 1 | head -n 1)

# 	generating output file
	printf "" > "${output_file}"
#
    for line in $(cat "${input_file}.tmp")
        do
            chrlen=${#line}
            size=$( echo "$(($chrlen-1))")
        #   change your ASCII symbol if you want
        #   but this is already phred score 20 and above
            ASCII=`cat /dev/urandom | tr -dc '5678<9:;=?ABC>DEFGHI' | fold -w $size | head -n 1`
        #	making fastq header components (variable variables)

        #   tile number within the flowcell lane
            P5=$(tr -dc '0-9' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 4 | head -n 1)
        #   'x'-coordinate of the cluster within the tile
            P6=$(tr -dc '0-9' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 5 | head -n 1)
        #   'y'-coordinate of the cluster within the tile
            P7=$(tr -dc '0-9' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 5 | head -n 1)
        #   the member of a pair, 1 or 2 (paired-end or mate-pair reads only)
            P8=$(tr -dc '12' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 1 | head -n 1)
        #   Y if the read is filtered, N otherwise
            P9=$(tr -dc 'YN' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 1 | head -n 1)
        #   control bits
            P10=$(tr -dc '06284' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 2 | head -n 1)
        #   index 1 sequence
            P11=$(tr -dc 'ATGC' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 8 | head -n 1)
        #   index 2 sequence
            P12=$(tr -dc 'CAGT' < /dev/urandom | dd bs=32 count=1 status=none | fold -w 8 | head -n 1)
        #   defining the character variable for quality part
            character=$( echo "${ASCII}")
#   making fastq
    echo -e "${line}" |\
        sed -e "1i@${P1}:${P2}:${P3}:${P4}:${P5}:${P6}:${P7} ${P8}:${P9}:${P10}:${P11}+${P12}"  | \
        sed -e "\$a+\n${character}"  | \
        cut -c -"${size}"  
    # closing while loop
        done >> "${output_file}"

# remove temporary file
        find "${input_path}" -name "${input_file}.tmp" -exec rm {} \;

#   Checking outputfile contents
    echo -e "\n#\tContents of output file ${YELLOW}$(basename "${output_file}" )${RESTORE}"
    #   Counting number of sequences
        nseq=$(grep -c '@' "${output_file}")
    #   Displaying file contents
        echo -e "\t\t${YELLOW}${nseq}${RESTORE} fastq sequences"

# 	getting ened time	
	end=$(date +%s) # end time of script
	runtime=$(((end - start))) # calculate runtime

### Echo process info
	echo -e "\n#\tProcessing time: ${YELLOW}${runtime} sec${RESTORE}"
	echo -e "\n#\t$YELLOW${user}$RESTORE, Thanks for using $YELLOW\"fastA2Q\"$RESTORE\n###"

### End of script
exit 0
