#!/bin/bash

#	Program 	- 	fastA2Q
#	Written by	-	Abhijeet Singh (abhijeetsingh.aau@gmail.com)
#	Time 		-	Tue, 20191029, 11:55

set -ou pipefail

# making colour variable
RESTORE='\033[0m'
YELLOW='\033[01;33m'
LRED='\033[01;31m' 


###    Recording the time whent he script was started

start=$(date +%s) #start time of script


echo -e "$LRED\
 _________________________________________
|   __           _      _    ____   ___   |
|  / _| __ _ ___| |_   / \  |___ \ / _ \  |
| | |_ / _| / __| __| / _ \   __) | | | | |
| |  _| (_| \__ \ |_ / ___ \ / __/| |_| | |
| |_|  \__,_|___/\__/_/   \_\_____|\__\_\ |
|_________________________________________|
${RESTORE}\n#\t${YELLOW}Â©Abhijeet Singh${RESTORE}
#\t${YELLOW}-abhijeetsingh.aau@gmail.com${RESTORE}
"

###     Setting up variables

input_file=""            
output_file=""           

###     Username

user=$(echo ${SUDO_USER:-${USER}})

###     Defaults

version_def="0.1.0"

###     Defining flags

#       function

usage() {
echo "Usage   : $0 [-i <input file>] [-o <output file>]
Example : fastA2Q -i /<input file>/ -o /<output file>/" 1>&2; exit 1;
}


#       flags

while getopts "i:o:hv" flags; 
        do      
                case "${flags}" in
                        
                        i)
                                input_file=${OPTARG}
                                ;;

                        o)
                                output_file=${OPTARG}
                                ;;

                        h)
                                echo "
Example : fastA2Q -i /<input file>/ -o /<output file>/

        -i      Input file
        -o      Output file
        -h      print Help
        -v      print fastA2Q version"
                                exit                                
                                ;;

                        v)
                                echo -e "${YELLOW}fastA2Q version: ${version_def}${RESTORE}\n\n###"
                                exit
                                ;;

                        *)
                                usage
                                exit
                                ;;

                        :)      
                                usage
                                exit
                                ;;
                        
                        \?)
                                usage
                                exit
                                ;;

                esac
        done

shift $((OPTIND-1))

###     check

if ((OPTIND == 1));then
        echo -e "\n#\tInput file not provided, Aborting!\n"
        usage
        exit
else
        echo -e "\n#\tProcessing: ${input_file}\n"
fi


###

###     Checking output_file 

output_file_def=$(echo ${input_file} | cut -d "." -f1)

if [ "$output_file" == "" ]; then
        output_file="${output_file_def}.fastq"
        echo -e "\n#\tUsing default output file: ${output_file_def}.fastq\n"
else
        echo -e "\n#\tOutput file: ${output_file}\n"
fi

###

#	making a new file
perl -pe '/^>/ ? print "\n" : chomp' ${input_file} | sed '/^$/d' | sed '/>/d' > ${input_file}.tmp


### making fastq header components (constant variables)

#   unique instrument name
P1=`cat /dev/urandom | tr -dc 'A-Z' | fold -w 3 | head -n 1`
#   run id
P2=`cat /dev/urandom | tr -dc 'A-Z' | fold -w 5 | head -n 1`
#   flowcell id
P3=`cat /dev/urandom | tr -dc 'A-Z0-9' | fold -w 7 | head -n 1`
#   flowcell lane
P4=`cat /dev/urandom | tr -dc '0-9' | fold -w 5 | head -n 1`

###

while read line
do
chrlen=${#line}
size=$( echo $chrlen)

#	change your ASCII symbol if you want 
#	but this is already phred score 20 and above
ASCII=`cat /dev/urandom | tr -dc '5678<9:;=?ABC>DEFGHI' | fold -w $size | head -n 1`

### making fastq header components (variable variables)

#   tile number within the flowcell lane
P5=`cat /dev/urandom | tr -dc '0-9' | fold -w 4 | head -n 1`
#   'x'-coordinate of the cluster within the tile
P6=`cat /dev/urandom | tr -dc '0-9' | fold -w 5 | head -n 1`
#   'y'-coordinate of the cluster within the tile
P7=`cat /dev/urandom | tr -dc '0-9' | fold -w 6 | head -n 1`
#   the member of a pair, 1 or 2 (paired-end or mate-pair reads only)
P8=`cat /dev/urandom | tr -dc '12' | fold -w 1 | head -n 1`
#   Y if the read is filtered, N otherwise
P9=`cat /dev/urandom | tr -dc 'YN' | fold -w 1 | head -n 1`
#   control bits
P10=`cat /dev/urandom | tr -dc '06284' | fold -w 2 | head -n 1`
#   index 1 sequence
P11=`cat /dev/urandom | tr -dc 'ATGC' | fold -w 8 | head -n 1`
#   index 2 sequence
P12=`cat /dev/urandom | tr -dc 'CAGT' | fold -w 8 | head -n 1`

#	defining the character variable for quality part
character=$( echo $ASCII)

#   making fastq

echo -e "$line" |\
	sed -e "1i@${P1}:${P2}:${P3}:${P4}:${P5}:${P6}:${P7} ${P8}:${P9}:${P10}:${P11}+${P12}"  | \
	#sed -e "\$a+\n$ASCII"  | \ 
	sed -e "\$a+\n$character"  | \
	cut -c -$size  >> ${output_file} #| cut -c -$size >>

# closing while loop
done < ${input_file}.tmp

# remove temporary file
rm ${input_file}.tmp

#################

# variable for echo outfile
output_file_echo=$(echo ${output_file} | rev | cut -d "/" -f1 | rev)

###

# getting ened time
end=$(date +%s) # end time of script
runtime=$(((end - start))) # calculate runtime

### 
echo -e "\n#\tProcessed >>>| $YELLOW${output_file_echo}$RESTORE |<<< in {$YELLOW${runtime} sec$RESTORE}\n\n"
###

echo -e "\n#\t$YELLOW${user}$RESTORE, Thanks for using $YELLOW\"fastA2Q\"$RESTORE\n\n###"
### End of script
